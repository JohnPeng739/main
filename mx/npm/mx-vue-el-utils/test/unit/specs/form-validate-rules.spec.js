// import formValidateRules from '../../../src/utils/form-validate-rules'
import { MxLocale, MxFormValidateRules } from '../../../dist/mx-vue-el-utils.min'

MxLocale.setLanguage('zh-CN')

let i18n = MxLocale.i18n

describe('test form validate rules', () => {
  it('test required rule', () => {
    let rule = MxFormValidateRules.requiredRule()
    expect(rule).toBeDefined()
    expect(rule.required).toBe(true)
    expect(rule.trigger).toBe('blur')
    rule = MxFormValidateRules.requiredRule({type: 'string'})
    expect(rule).toBeDefined()
    expect(rule.required).toBe(true)
    expect(rule.type).toBe('string')
    expect(rule.trigger).toBe('blur')
    rule = MxFormValidateRules.requiredRule({type: 'string', msg: '名称字段必须输入数据'})
    expect(rule).toBeDefined()
    expect(rule.required).toBe(true)
    expect(rule.type).toBe('string')
    expect(rule.message).toBe('名称字段必须输入数据')
    expect(rule.trigger).toBe('blur')
    rule = MxFormValidateRules.requiredRule({type: 'string', msg: '名称字段必须输入数据', trigger: 'change'})
    expect(rule).toBeDefined()
    expect(rule.required).toBe(true)
    expect(rule.type).toBe('string')
    expect(rule.message).toBe('名称字段必须输入数据')
    expect(rule.trigger).toBe('change')
  })
  it('test range rule', () => {
    expect(() => MxFormValidateRules.rangeRule()).toThrow()
    expect(() => MxFormValidateRules.rangeRule({type: 'string'})).toThrow()
    let rule = MxFormValidateRules.rangeRule({type: 'string', min: 3})
    expect(rule).toBeDefined()
    expect(rule.type).toBe('string')
    expect(rule.min).toBe(3)
    expect(rule.message).toBe(i18n.t('message.validate.stringRangeLarge', [3]))
    expect(rule.trigger).toBe('blur')
    rule = MxFormValidateRules.rangeRule({type: 'string', max: 30})
    expect(rule).toBeDefined()
    expect(rule.type).toBe('string')
    expect(rule.max).toBe(30)
    expect(rule.message).toBe(i18n.t('message.validate.stringRangeSmall', [30]))
    expect(rule.trigger).toBe('blur')
    rule = MxFormValidateRules.rangeRule({type: 'string', min: 3, max: 30, trigger: 'change'})
    expect(rule).toBeDefined()
    expect(rule.type).toBe('string')
    expect(rule.min).toBe(3)
    expect(rule.max).toBe(30)
    expect(rule.message).toBe(i18n.t('message.validate.stringRangeBetween', [3, 30]))
    expect(rule.trigger).toBe('change')
    rule = MxFormValidateRules.rangeRule({type: 'number', min: 3})
    expect(rule).toBeDefined()
    expect(rule.type).toBe('number')
    expect(rule.validator).toBeDefined()
    expect(typeof rule.validator).toBe('function')
    expect(rule.trigger).toBe('blur')
    rule = MxFormValidateRules.rangeRule({type: 'number', max: 30})
    expect(rule).toBeDefined()
    expect(rule.type).toBe('number')
    expect(rule.validator).toBeDefined()
    expect(typeof rule.validator).toBe('function')
    expect(rule.trigger).toBe('blur')
    rule = MxFormValidateRules.rangeRule({type: 'number', min: 3, max: 30, trigger: 'change'})
    expect(rule).toBeDefined()
    expect(rule.type).toBe('number')
    expect(rule.validator).toBeDefined()
    expect(typeof rule.validator).toBe('function')
    expect(rule.trigger).toBe('change')
    rule = MxFormValidateRules.rangeRule({type: 'date', min: '2017/12/12'})
    expect(rule).toBeDefined()
    expect(rule.type).toBe('date')
    expect(rule.validator).toBeDefined()
    expect(typeof rule.validator).toBe('function')
    expect(rule.trigger).toBe('blur')
    rule = MxFormValidateRules.rangeRule({type: 'date', max: '2017/12/20'})
    expect(rule).toBeDefined()
    expect(rule.type).toBe('date')
    expect(rule.validator).toBeDefined()
    expect(typeof rule.validator).toBe('function')
    expect(rule.trigger).toBe('blur')
    rule = MxFormValidateRules.rangeRule({type: 'date', min: '2017/12/12', max: '2017/12/20', trigger: 'change'})
    expect(rule).toBeDefined()
    expect(rule.type).toBe('date')
    expect(rule.validator).toBeDefined()
    expect(typeof rule.validator).toBe('function')
    expect(rule.trigger).toBe('change')
    rule = MxFormValidateRules.rangeRule({type: 'array', min: 3})
    expect(rule).toBeDefined()
    expect(rule.type).toBe('array')
    expect(rule.validator).toBeDefined()
    expect(typeof rule.validator).toBe('function')
    expect(rule.trigger).toBe('blur')
    rule = MxFormValidateRules.rangeRule({type: 'array', max: 30})
    expect(rule).toBeDefined()
    expect(rule.type).toBe('array')
    expect(rule.validator).toBeDefined()
    expect(typeof rule.validator).toBe('function')
    expect(rule.trigger).toBe('blur')
    rule = MxFormValidateRules.rangeRule({type: 'array', min: 3, max: 30, trigger: 'change'})
    expect(rule).toBeDefined()
    expect(rule.type).toBe('array')
    expect(rule.validator).toBeDefined()
    expect(typeof rule.validator).toBe('function')
    expect(rule.trigger).toBe('change')
  })
  it('test email rule', () => {
    let rule = MxFormValidateRules.emailRule()
    expect(rule).toBeDefined()
    expect(rule.type).toBe('email')
    expect(rule.message).toBe(i18n.t('message.validate.email'))
    expect(rule.trigger).toBe('blur')
    rule = MxFormValidateRules.emailRule({msg: 'Invalidate email format.'})
    expect(rule).toBeDefined()
    expect(rule.type).toBe('email')
    expect(rule.message).toBe('Invalidate email format.')
    expect(rule.trigger).toBe('blur')
    rule = MxFormValidateRules.emailRule({msg: 'Invalidate email format.', trigger: 'change'})
    expect(rule).toBeDefined()
    expect(rule.type).toBe('email')
    expect(rule.message).toBe('Invalidate email format.')
    expect(rule.trigger).toBe('change')
  })
  it('test custom rule', () => {
    let validator = (value, rule, callback) => {}
    let rule = MxFormValidateRules.customRule({validator})
    expect(rule).toBeDefined()
    expect(rule.validator).toBeDefined()
    expect(typeof rule.validator).toBe('function')
    expect(rule.trigger).toBe('blur')
    rule = MxFormValidateRules.customRule({validator, trigger: 'change'})
    expect(rule).toBeDefined()
    expect(rule.validator).toBeDefined()
    expect(typeof rule.validator).toBe('function')
    expect(rule.trigger).toBe('change')
    expect(() => MxFormValidateRules.customRule()).toThrow()
  })
})
